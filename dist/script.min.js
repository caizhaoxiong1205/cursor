// 常量定义
const MAX_FILE_SIZE=50*1024*1024;const ACCEPTED_TYPES=["image/png","image/jpeg","image/jpg"];const DEFAULT_QUALITY=80;

// DOM元素
const uploadArea=document.getElementById("upload-area");const fileInput=document.getElementById("file-input");const compressionSection=document.getElementById("compression-section");const batchSection=document.getElementById("batch-section");const originalImage=document.getElementById("original-image");const compressedImage=document.getElementById("compressed-image");const qualitySlider=document.getElementById("quality-slider");const qualityValue=document.getElementById("quality-value");const compressBtn=document.getElementById("compress-btn");const downloadBtn=document.getElementById("download-btn");const resetBtn=document.getElementById("reset-btn");const batchQualitySlider=document.getElementById("batch-quality-slider");const batchQualityValue=document.getElementById("batch-quality-value");const batchCompressBtn=document.getElementById("batch-compress-btn");const batchResetBtn=document.getElementById("batch-reset-btn");const batchFilesList=document.getElementById("batch-files-list");const batchDownloadBtn=document.getElementById("batch-download-btn");const fileCount=document.getElementById("file-count");const totalCompressionRate=document.getElementById("total-compression-rate");

// 状态管理
let currentFile=null;let compressedBlob=null;let batchFiles=[];

// 工具函数
const formatFileSize=bytes=>{if(bytes===0)return"0 B";const k=1024;const sizes=["B","KB","MB","GB"];const i=Math.floor(Math.log(bytes)/Math.log(k));return parseFloat((bytes/Math.pow(k,i)).toFixed(2))+" "+sizes[i]};

const calculateCompressionRate=(originalSize,compressedSize)=>Math.round((1-compressedSize/originalSize)*100);

const validateFile=file=>{if(!ACCEPTED_TYPES.includes(file.type))throw new Error("不支持的文件类型，仅支持PNG和JPG格式");if(file.size>MAX_FILE_SIZE)throw new Error("文件大小超过限制，最大支持50MB");return true};

// 单文件处理
const handleSingleFile=async file=>{try{currentFile=file;validateFile(file);const reader=new FileReader();reader.onload=e=>{originalImage.src=e.target.result;originalImage.onload=()=>{document.getElementById("original-size").textContent=formatFileSize(file.size);compressionSection.style.display="block";batchSection.style.display="none";}};reader.readAsDataURL(file)}catch(error){alert(error.message)}};

const compressImage=async()=>{if(!currentFile)return;try{compressBtn.disabled=true;const options={maxSizeMB:1,maxWidthOrHeight:1920,useWebWorker:true,quality:qualitySlider.value/100};const compressedFile=await imageCompression(currentFile,options);compressedBlob=compressedFile;compressedImage.src=URL.createObjectURL(compressedFile);const originalSize=currentFile.size;const compressedSize=compressedFile.size;document.getElementById("compressed-size").textContent=formatFileSize(compressedSize);document.getElementById("compression-rate").textContent=calculateCompressionRate(originalSize,compressedSize)+"%";downloadBtn.disabled=false}catch(error){alert("压缩失败："+error.message)}finally{compressBtn.disabled=false}};

const downloadImage=()=>{if(!compressedBlob)return;const link=document.createElement("a");link.href=URL.createObjectURL(compressedBlob);link.download=`${currentFile.name.replace(/\.[^/.]+$/,"")}_compressed${currentFile.name.match(/\.[^/.]+$/)[0]}`;document.body.appendChild(link);link.click();document.body.removeChild(link)};

// 批量处理
const handleBatchFiles=async files=>{try{batchFiles=Array.from(files).filter(file=>{try{return validateFile(file)}catch{return false}});if(batchFiles.length===0)throw new Error("没有有效的图片文件");fileCount.textContent=batchFiles.length;renderBatchFiles();batchSection.style.display="block";compressionSection.style.display="none"}catch(error){alert(error.message)}};

const renderBatchFiles=()=>{batchFilesList.innerHTML=batchFiles.map((file,index)=>`<div class="batch-file-item" data-index="${index}"><div class="file-info"><span>${file.name}</span><span>${formatFileSize(file.size)}</span></div><div class="file-status status-pending">等待处理</div></div>`).join("")};

const updateBatchFileStatus=(index,status,compressedSize=null)=>{const item=batchFilesList.children[index];const statusElement=item.querySelector(".file-status");statusElement.className="file-status status-"+status;if(compressedSize){const originalSize=batchFiles[index].size;const compressionRate=calculateCompressionRate(originalSize,compressedSize);item.querySelector(".file-info").innerHTML+=`<span>压缩率: ${compressionRate}%</span>`}};

const compressBatch=async()=>{if(batchFiles.length===0)return;try{batchCompressBtn.disabled=true;const quality=batchQualitySlider.value/100;const zip=new JSZip();let totalOriginalSize=0;let totalCompressedSize=0;for(let i=0;i<batchFiles.length;i++){const file=batchFiles[i];totalOriginalSize+=file.size;updateBatchFileStatus(i,"processing");try{const options={maxSizeMB:1,maxWidthOrHeight:1920,useWebWorker:true,quality};const compressedFile=await imageCompression(file,options);totalCompressedSize+=compressedFile.size;zip.file(`${file.name.replace(/\.[^/.]+$/,"")}_compressed${file.name.match(/\.[^/.]+$/)[0]}`,compressedFile);updateBatchFileStatus(i,"completed",compressedFile.size)}catch(error){updateBatchFileStatus(i,"error")}}const compressionRate=calculateCompressionRate(totalOriginalSize,totalCompressedSize);totalCompressionRate.textContent=compressionRate+"%";batchDownloadBtn.disabled=false}catch(error){alert("批量压缩失败："+error.message)}finally{batchCompressBtn.disabled=false}};

const downloadBatch=async()=>{if(batchFiles.length===0)return;try{batchDownloadBtn.disabled=true;const content=await zip.generateAsync({type:"blob"});saveAs(content,"compressed_images.zip")}catch(error){alert("下载失败："+error.message)}finally{batchDownloadBtn.disabled=false}};

// 事件监听
uploadArea.addEventListener("dragover",e=>{e.preventDefault();uploadArea.style.borderColor="#0077ed"});

uploadArea.addEventListener("dragleave",()=>{uploadArea.style.borderColor="#0071e3"});

uploadArea.addEventListener("drop",e=>{e.preventDefault();uploadArea.style.borderColor="#0071e3";const files=e.dataTransfer.files;if(files.length===1)handleSingleFile(files[0]);else handleBatchFiles(files)});

fileInput.addEventListener("change",e=>{const files=e.target.files;if(files.length===1)handleSingleFile(files[0]);else handleBatchFiles(files)});

qualitySlider.addEventListener("input",e=>{qualityValue.textContent=e.target.value+"%"});

batchQualitySlider.addEventListener("input",e=>{batchQualityValue.textContent=e.target.value+"%"});

compressBtn.addEventListener("click",compressImage);

downloadBtn.addEventListener("click",downloadImage);

resetBtn.addEventListener("click",()=>{currentFile=null;compressedBlob=null;compressionSection.style.display="none";fileInput.value=""});

batchCompressBtn.addEventListener("click",compressBatch);

batchDownloadBtn.addEventListener("click",downloadBatch);

batchResetBtn.addEventListener("click",()=>{batchFiles=[];batchSection.style.display="none";fileInput.value=""}); 